
#Область ПрограммныйИнтерфейс

Функция СервисныйАккаунтПоУмолчанию() Экспорт
	Возврат S3_ОбъектноеХранилищеПовтИсп.СервисныйАккаунтПоУмолчанию();
КонецФункции

Функция НастройкиСервисногоАккаунта(СервисныйАккаунт) Экспорт
	Возврат S3_ОбъектноеХранилищеПовтИсп.НастройкиСервисногоАккаунта(СервисныйАккаунт);
КонецФункции

#Область ПолучениеФайлов

Функция НовыйПараметрыПолученияФайла() Экспорт
	
	ПараметрыПолученияФайла = НовыйОбщиеПараметрыОбработкиФайла();
	ПараметрыПолученияФайла.Вставить("Расширение");
	
	Возврат ПараметрыПолученияФайла;
	
КонецФункции

Функция ПолучитьФайл(ПараметрыПолученияФайла, НастройкиСервисногоАккаунта = Неопределено, ТекущаяСессия = Неопределено) Экспорт
	
	Сессия           = ТекущаяСессия(ТекущаяСессия);
	НастройкиСервиса = НастройкиСервисаПоУмолчанию(НастройкиСервисногоАккаунта);
	URL              = URIОбъекта(НастройкиСервиса, ПараметрыПолученияФайла);
	
	ДополнительныеПараметры = ДополнительныеПараметрыМетодов(НастройкиСервиса);
	
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("response-content-type", MIMEТипДляРасширенияФайла(ПараметрыПолученияФайла.Расширение));
	
	ДополнительныеПараметры.ПараметрыЗапроса = ПараметрыЗапроса;
	
	Результат = КоннекторHTTP.Get(URL,, ДополнительныеПараметры, Сессия);
	
	Если ЭтоКодОшибки(Результат.КодСостояния) Тогда
		Сообщение = НСтр("ru = 'Не удалось получить файл'", "ru");
		Событие = СобытиеПолучениеФайла();
		ОбработатьОшибку(Результат, Сообщение, Событие);
	КонецЕсли;
	
	ДанныеФайла = КоннекторHTTP.КакДвоичныеДанные(Результат);
	
	Если ТипЗнч(ДанныеФайла) <> Тип("ДвоичныеДанные")
		Или Не ЗначениеЗаполнено(ДанныеФайла) Тогда
		ВызватьИсключение НСтр("ru = 'Файл не найден. Подробнее см. в журнале регистраци.'", "ru");
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаФайловВХранилище

Функция НовыйПараметрыЗагрузкиФайла() Экспорт
	
	ПараметрыЗагрузкиФайла = НовыйОбщиеПараметрыОбработкиФайла();
	ПараметрыЗагрузкиФайла.Вставить("ДанныеФайла");
	ПараметрыЗагрузкиФайла.Вставить("МетаданныеФайла", Новый Структура);
	
	Возврат ПараметрыЗагрузкиФайла;
	
КонецФункции

Функция ЗагрузитьФайл(ПараметрыЗагрузкиФайла, НастройкиСервисногоАккаунта = Неопределено, ТекущаяСессия = Неопределено) Экспорт
	
	Сессия           = ТекущаяСессия(ТекущаяСессия);
	НастройкиСервиса = НастройкиСервисаПоУмолчанию(НастройкиСервисногоАккаунта);
	URL              = URIОбъекта(НастройкиСервиса, ПараметрыЗагрузкиФайла);
	
	ДополнительныеПараметры = ДополнительныеПараметрыМетодов(НастройкиСервиса);
	ДополнительныеПараметры.Данные = ПараметрыЗагрузкиФайла.ДанныеФайла;
	
	Заголовки = Новый Соответствие;
	ОписаниеМетаданных = СформироватьОписаниеМетаданныхНовогоФайла(ПараметрыЗагрузкиФайла);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Заголовки, ОписаниеМетаданных);
	ДополнительныеПараметры.Заголовки = Заголовки;

	Результат = КоннекторHTTP.Put(URL,, ДополнительныеПараметры, Сессия);
	
	Если ЭтоКодОшибки(Результат.КодСостояния) Тогда
		Сообщение = НСтр("ru = 'Не удалось загрузить файл'", "ru");
		Событие   = СобытиеЗагрузкиФайла();
		ОбработатьОшибку(Результат, Сообщение, Событие);
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область УдалениеФайла

Функция НовыйПараметрыУдаленияФайла() Экспорт
	
	ПараметрыЗагрузкиФайла = НовыйОбщиеПараметрыОбработкиФайла();
	Возврат ПараметрыЗагрузкиФайла;
	
КонецФункции

Функция УдалитьФайл(ПараметрыУдаленияФайла, НастройкиСервисногоАккаунта = Неопределено, ТекущаяСессия = Неопределено) Экспорт
	
	Сессия           = ТекущаяСессия(ТекущаяСессия);
	НастройкиСервиса = НастройкиСервисаПоУмолчанию(НастройкиСервисногоАккаунта);
	URL              = URIОбъекта(НастройкиСервиса, ПараметрыУдаленияФайла);
	
	ДополнительныеПараметры = ДополнительныеПараметрыМетодов(НастройкиСервиса);
	
	Результат = КоннекторHTTP.Delete(URL,, ДополнительныеПараметры, Сессия);
	
	Если ЭтоКодОшибки(Результат.КодСостояния) Тогда
		Сообщение = НСтр("ru = 'Не удалось удалить файл'", "ru");
		Событие = СобытиеУдалениеФайла();
		ОбработатьОшибку(Результат, Сообщение, Событие);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСсылки

Функция НовыйПараметрыПолученияСсылки() Экспорт
	
	ПараметрыЗагрузкиФайла = НовыйОбщиеПараметрыОбработкиФайла();
	ПараметрыЗагрузкиФайла.Вставить("ВремяЖизниСсылки");
	ПараметрыЗагрузкиФайла.Вставить("ДатаЗапроса", ТекущаяДатаСеанса());
	ПараметрыЗагрузкиФайла.Вставить("ЧасовойПоясЗапроса", ЧасовойПоясСеанса());
	
	Возврат ПараметрыЗагрузкиФайла;
	
КонецФункции

Функция ПолучитьСсылку(ПараметрыПолученияСсылки, НастройкиСервисногоАккаунта = Неопределено) Экспорт
	
	НастройкиСервиса = НастройкиСервисаПоУмолчанию(НастройкиСервисногоАккаунта);
	Возврат ПолучитьПодписаннуюСсылку(НастройкиСервиса, ПараметрыПолученияСсылки);
	
КонецФункции

Функция ПолучитьПодписаннуюСсылку(НастройкиСервиса, ПараметрыПолученияСсылки) Экспорт
	
	ТекущаяДата = УниверсальноеВремя(
		ПараметрыПолученияСсылки.ДатаЗапроса,
		ПараметрыПолученияСсылки.ЧасовойПоясЗапроса);
	
	ДатаISO              = Формат(ТекущаяДата, "ДФ=yyyyMMddTHHmmssZ");
	ОбластьДействияДата  = Формат(ТекущаяДата, "ДФ=yyyyMMdd");
	МетодЗапроса         = "GET";
	КаноничныйURL        = URNОбъекта(ПараметрыПолученияСсылки);
	ПодписанныеЗаголовки = СформироватьПодписаниеЗаголовковСсылки(НастройкиСервиса, ДатаISO);
	Удостоверение        = Удостоверение(НастройкиСервиса, ОбластьДействияДата);
	МетодПодписания      = НастройкиСервиса.ТипАутентификации;
	ХешированнаяПолезнаяНагрузка = "UNSIGNED-PAYLOAD";
	
	ФормированиеПараметровЗапроса = Новый Структура;
	ФормированиеПараметровЗапроса.Вставить("ДатаISO", ДатаISO);
	ФормированиеПараметровЗапроса.Вставить("Удостоверение", Удостоверение);
	ФормированиеПараметровЗапроса.Вставить("ПодписанныеЗаголовки", ПодписанныеЗаголовки);
	ФормированиеПараметровЗапроса.Вставить("ВремяЖизниСсылки", ПараметрыПолученияСсылки.ВремяЖизниСсылки);
	ФормированиеПараметровЗапроса.Вставить("МетодПодписания", МетодПодписания);
	ПараметрыЗапроса = СформироватьПараметрыЗапросаСсылки(НастройкиСервиса, ФормированиеПараметровЗапроса);
	
	ЧастиКаноническогоЗапроса = Новый Массив;
	ЧастиКаноническогоЗапроса.Добавить(МетодЗапроса);
	ЧастиКаноническогоЗапроса.Добавить(КаноничныйURL);
	ЧастиКаноническогоЗапроса.Добавить(ПараметрыЗапроса);
	ЧастиКаноническогоЗапроса.Добавить(ПодписанныеЗаголовки.КаноничныеЗаголовки);
	ЧастиКаноническогоЗапроса.Добавить(ПодписанныеЗаголовки.ПодписанныеЗаголовки);
	ЧастиКаноническогоЗапроса.Добавить(ХешированнаяПолезнаяНагрузка);
	КаноническийЗапрос = СтрСоединить(ЧастиКаноническогоЗапроса, Символы.ПС);
	
	ЧастиПодписи = Новый Массив;
	ЧастиПодписи.Добавить(МетодПодписания);
	ЧастиПодписи.Добавить(ДатаISO);
	ЧастиПодписи.Добавить(Удостоверение);
	ЧастиПодписи.Добавить(ХешированиеДанных(ХешФункция.SHA256, КаноническийЗапрос));
	СтрокаДляПодписи = СтрСоединить(ЧастиПодписи, Символы.ПС);
	
	Ключ = КлючПодписи(
		НастройкиСервиса.СекретныйКлюч,
		ОбластьДействияДата,
		НастройкиСервиса.Регион,
		НастройкиСервиса.Сервис);
	Подпись = НРег(ПолучитьHexСтрокуИзДвоичныхДанных(ПодписатьСообщениеHMAC(Ключ, СтрокаДляПодписи)));
	
	Ссылка = СтрШаблон(
		"%1?%2&X-Amz-Signature=%3",
		URIОбъекта(НастройкиСервиса, ПараметрыПолученияСсылки),
		ПараметрыЗапроса,
		Подпись);
		
	Возврат Ссылка;
	
КонецФункции

#КонецОбласти

#Область ФайлыБакета

Функция НовыйПараметрыПолученияФайловБакета() Экспорт
	
	ПараметрыПолученияФайловБакета = НовыйОбщиеПараметрыОбработкиБакета();
	ПараметрыПолученияФайловБакета.Вставить("КоличествоФайлов", 0);
	
	Возврат ПараметрыПолученияФайловБакета;
	
КонецФункции

Функция ПолучитьФайлыБакета(ПараметрыПолученияФайловБакета, НастройкиСервисногоАккаунта = Неопределено, ТекущаяСессия = Неопределено) Экспорт
	
	Сессия           = ТекущаяСессия(ТекущаяСессия);
	НастройкиСервиса = НастройкиСервисаПоУмолчанию(НастройкиСервисногоАккаунта);
	URL              = URIБакета(НастройкиСервиса, ПараметрыПолученияФайловБакета);
	
	ДополнительныеПараметры = ДополнительныеПараметрыМетодов(НастройкиСервиса);
	
	ПараметрыЗапроса = СформироватьПараметрыЗапросаФайловБакета(ПараметрыПолученияФайловБакета);
	ДополнительныеПараметры.ПараметрыЗапроса = ПараметрыЗапроса;
	
	Сообщение = НСтр("ru = 'Не удалось получить файлы бакета'", "ru");
	Событие = СобытиеПолученияФайловБакета();
	ФайлыБакета = НовыйДанныеФайловБакета();
	
	Пока Истина Цикл
		
		Результат = КоннекторHTTP.Get(URL,, ДополнительныеПараметры, Сессия);
		
		Если ЭтоКодОшибки(Результат.КодСостояния) Тогда
			ОбработатьОшибку(Результат, Сообщение, Событие);
		КонецЕсли;
		
		Попытка
			
			ДанныеФайловБакета = РазобратьОтветФайловБакета(Результат);
			
			Если ДанныеФайловБакета.КоличествоФайлов Тогда 
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФайловБакета.Файлы, ФайлыБакета);
			КонецЕсли;
			
			Если ДанныеФайловБакета.КоличествоФайлов >= ПараметрыПолученияФайловБакета.КоличествоФайлов
				Или ДанныеФайловБакета.ВсеФайлыПолучены
				Или Не ЗначениеЗаполнено(ДанныеФайловБакета.СледующийТокен) Тогда
				Прервать;
			КонецЕсли;
			
			ДополнительныеПараметры.ПараметрыЗапроса.Вставить("continuation-token", ДанныеФайловБакета.СледующийТокен);
			
		Исключение
			
			Сообщение = СтрШаблон(
				Нстр("ru = '%1 %2, по причине:%3%4'", "ru"),
				Сообщение, 
				ПараметрыПолученияФайловБакета.Бакет, Символы.ПС,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, Сообщение);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ФайлыБакета;
	
КонецФункции

#КонецОбласти

#Область Общие

Функция MIMEТипДляРасширенияФайла(Расширение) Экспорт
	
	MIMEТипПоУмолчанию = "binary/octet-stream";
	
	Если Не ЗначениеЗаполнено(Расширение) Тогда
		Возврат MIMEТипПоУмолчанию;
	КонецЕсли;
	
	MIMEТип = СоответствиеРасширенийContentType()[Расширение];
	Если ЗначениеЗаполнено(MIMEТип) Тогда
		Возврат MIMEТип;
	Иначе
		Возврат MIMEТипПоУмолчанию;
	КонецЕсли;
	
КонецФункции

Функция СоответствиеРасширенийContentType() Экспорт

	Соответствие = Новый Соответствие;
	
	// ================== application/* ==================
	Соответствие.Вставить(".1cd",    "application/x-1c");
	Соответствие.Вставить(".7z",     "application/x-7z-compressed");
	Соответствие.Вставить(".apk",    "application/vnd.android.package-archive");
	Соответствие.Вставить(".arc",    "application/x-freearc");
	Соответствие.Вставить(".azw",    "application/vnd.amazon.ebook");
	Соответствие.Вставить(".bin",    "application/octet-stream");
	Соответствие.Вставить(".bz",     "application/x-bzip");
	Соответствие.Вставить(".bz2",    "application/x-bzip2");
	Соответствие.Вставить(".cf",     "application/x-1c");
	Соответствие.Вставить(".csh",    "application/x-csh");
	Соответствие.Вставить(".doc",    "application/msword");
	Соответствие.Вставить(".docm",   "application/vnd.ms-word.document.macroenabled.12");
	Соответствие.Вставить(".docx",   "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
	Соответствие.Вставить(".dot",    "application/msword");
	Соответствие.Вставить(".dotm",   "application/vnd.ms-word.template.macroenabled.12");
	Соответствие.Вставить(".dotx",   "application/vnd.openxmlformats-officedocument.wordprocessingml.template");
	Соответствие.Вставить(".dt",     "application/x-1c");
	Соответствие.Вставить(".epf",    "application/x-1c");
	Соответствие.Вставить(".eot",    "application/vnd.ms-fontobject");
	Соответствие.Вставить(".erf",    "application/x-1c");
	Соответствие.Вставить(".exe",    "application/vnd.microsoft.portable-executable");
	Соответствие.Вставить(".gz",     "application/gzip");
	Соответствие.Вставить(".jar",    "application/java-archive");
	Соответствие.Вставить(".json",   "application/json");
	Соответствие.Вставить(".jsonld", "application/ld+json");
	Соответствие.Вставить(".mpkg",   "application/vnd.apple.installer+xml");
	Соответствие.Вставить(".msi",    "application/x-msdownload");
	Соответствие.Вставить(".odp",    "application/vnd.oasis.opendocument.presentation");
	Соответствие.Вставить(".ods",    "application/vnd.oasis.opendocument.spreadsheet");
	Соответствие.Вставить(".odt",    "application/vnd.oasis.opendocument.text");
	Соответствие.Вставить(".ogx",    "application/ogg");
	Соответствие.Вставить(".pdf",    "application/pdf");
	Соответствие.Вставить(".php",    "application/x-httpd-php");
	Соответствие.Вставить(".potm",   "application/vnd.ms-powerpoint.template.macroenabled.12");
	Соответствие.Вставить(".potx",   "application/vnd.openxmlformats-officedocument.presentationml.template");
	Соответствие.Вставить(".ppsx",   "application/vnd.openxmlformats-officedocument.presentationml.slideshow");
	Соответствие.Вставить(".ppsm",   "application/vnd.ms-powerpoint.slideshow.macroenabled.12");
	Соответствие.Вставить(".ppt",    "application/vnd.ms-powerpoint");
	Соответствие.Вставить(".pptx",   "application/vnd.openxmlformats-officedocument.presentationml.presentation");
	Соответствие.Вставить(".rar",    "application/x-rar-compressed");
	Соответствие.Вставить(".rtf",    "application/rtf");
	Соответствие.Вставить(".sh",     "application/x-sh");
	Соответствие.Вставить(".slk",    "application/vnd.ms-excel");
	Соответствие.Вставить(".ssf",    "application/x-1c");
	Соответствие.Вставить(".svgz",   "image/svg+xml");
	Соответствие.Вставить(".swf",    "application/x-shockwave-flash");
	Соответствие.Вставить(".tar",    "application/x-tar");
	Соответствие.Вставить(".wasm",   "application/wasm");
	Соответствие.Вставить(".xhtml",  "application/xhtml+xml");
	Соответствие.Вставить(".xls",    "application/vnd.ms-excel");
	Соответствие.Вставить(".xlsb",   "application/vnd.ms-excel.sheet.binary.macroenabled.12");
	Соответствие.Вставить(".xlsm",   "application/vnd.ms-excel.sheet.macroenabled.12");
	Соответствие.Вставить(".xlsx",   "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
	Соответствие.Вставить(".xltm",   "application/vnd.ms-excel.template.macroenabled.12");
	Соответствие.Вставить(".xltx",   "application/vnd.openxmlformats-officedocument.spreadsheetml.template");
	Соответствие.Вставить(".xml",    "application/xml");
	Соответствие.Вставить(".xul",    "application/vnd.mozilla.xul+xml");
	Соответствие.Вставить(".zip",    "application/zip");
	
	// ================== audio/* ==================
	Соответствие.Вставить(".aac",    "audio/aac");
	Соответствие.Вставить(".flac",   "audio/flac");
	Соответствие.Вставить(".m4a",    "audio/mp4");
	Соответствие.Вставить(".mid",    "audio/midi");
	Соответствие.Вставить(".midi",   "audio/midi");
	Соответствие.Вставить(".mp3",    "audio/mpeg");
	Соответствие.Вставить(".oga",    "audio/ogg");
	Соответствие.Вставить(".ogg",    "audio/ogg");
	Соответствие.Вставить(".opus",   "audio/opus");
	Соответствие.Вставить(".wav",    "audio/wav");
	Соответствие.Вставить(".weba",   "audio/webm");
	
	// ================== image/* ==================
	Соответствие.Вставить(".apng",   "image/apng");
	Соответствие.Вставить(".avif",   "image/avif");
	Соответствие.Вставить(".bmp",    "image/bmp");
	Соответствие.Вставить(".gif",    "image/gif");
	Соответствие.Вставить(".heic",   "image/heic");
	Соответствие.Вставить(".heif",   "image/heif");
	Соответствие.Вставить(".ico",    "image/vnd.microsoft.icon");
	Соответствие.Вставить(".jpeg",   "image/jpeg");
	Соответствие.Вставить(".jpg",    "image/jpeg");
	Соответствие.Вставить(".png",    "image/png");
	Соответствие.Вставить(".svg",    "image/svg+xml");
	Соответствие.Вставить(".tif",    "image/tiff");
	Соответствие.Вставить(".tiff",   "image/tiff");
	Соответствие.Вставить(".webp",   "image/webp");
	
	// ================== text/* ==================
	Соответствие.Вставить(".css",    "text/css");
	Соответствие.Вставить(".csv",    "text/csv");
	Соответствие.Вставить(".htm",    "text/html");
	Соответствие.Вставить(".html",   "text/html");
	Соответствие.Вставить(".ics",    "text/calendar");
	Соответствие.Вставить(".js",     "text/javascript");
	Соответствие.Вставить(".md",     "text/markdown");
	Соответствие.Вставить(".mjs",    "text/javascript");
	Соответствие.Вставить(".txt",    "text/plain");
	Соответствие.Вставить(".xml",    "text/xml");
	Соответствие.Вставить(".yaml",   "text/yaml");
	Соответствие.Вставить(".yml",    "text/yaml");
	
	// ================== video/* ==================
	Соответствие.Вставить(".3g2",    "video/3gpp2");
	Соответствие.Вставить(".3gp",    "video/3gpp");
	Соответствие.Вставить(".avi",    "video/x-msvideo");
	Соответствие.Вставить(".m4v",    "video/x-m4v");
	Соответствие.Вставить(".mkv",    "video/x-matroska");
	Соответствие.Вставить(".mov",    "video/quicktime");
	Соответствие.Вставить(".mp4",    "video/mp4");
	Соответствие.Вставить(".mpeg",   "video/mpeg");
	Соответствие.Вставить(".ogv",    "video/ogg");
	Соответствие.Вставить(".ts",     "video/mp2t");
	Соответствие.Вставить(".webm",   "video/webm");
	
	Возврат Соответствие;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НастройкиСервисаПоУмолчанию(НастройкиСервиса = Неопределено) Экспорт
	
	Если НастройкиСервиса <> Неопределено Тогда
		Возврат НастройкиСервиса;
	КонецЕсли;
	
	СервисныйАккаунт = СервисныйАккаунтПоУмолчанию();
	
	Если Не ЗначениеЗаполнено(СервисныйАккаунт) Тогда
		ВызватьИсключение НСтр("ru = 'Значение константы с сервисным аккаунтом по умолчанию не заполнено.'", "ru");
	ИначеЕсли ТипЗнч(СервисныйАккаунт) <> Тип("СправочникСсылка.S3_СервисныеАккаунтыОбъектныхХранилищ") Тогда
		ВызватьИсключение НСтр("ru = 'Указан некорректный элемент в константе со значением сервисного аккаунта по умолчанию.'", "ru");
	КонецЕсли;
	
	НастройкиСервисногоАккаунта = НастройкиСервисногоАккаунта(СервисныйАккаунт);
	
	Если Не ЗначениеЗаполнено(НастройкиСервисногоАккаунта.СервисныйАккаунт)
		Или Не НастройкиСервисногоАккаунта.Использовать Тогда
		ВызватьИсключение НСтр("ru = 'Сервисный аккаунт не может быть использован.'", "ru");
	Иначе
		Возврат НастройкиСервисногоАккаунта;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйОбщиеПараметрыОбработкиФайла()
	
	ОбщиеПараметрыОбработкиФайла = Новый Структура;
	ОбщиеПараметрыОбработкиФайла.Вставить("Бакет");
	ОбщиеПараметрыОбработкиФайла.Вставить("КлючОбъекта");
	
	Возврат ОбщиеПараметрыОбработкиФайла;
	
КонецФункции

Функция НовыйОбщиеПараметрыОбработкиБакета()
	
	ОбщиеПараметрыОбработкиБакета = Новый Структура;
	ОбщиеПараметрыОбработкиБакета.Вставить("Бакет");
	
	Возврат ОбщиеПараметрыОбработкиБакета;
	
КонецФункции

Функция ТекущаяСессия(Знач Сессия = Неопределено)
	
	Если Сессия = Неопределено Тогда
		Сессия = КоннекторHTTP.СоздатьСессию();
		Сессия.Заголовки = Новый Соответствие;
	КонецЕсли;
	
	Возврат Сессия;
	
КонецФункции

Функция ДанныеАутентификации(ДанныеАвторизации)
	
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("Тип"                      , ДанныеАвторизации.ТипАутентификации);
	ДанныеАутентификации.Вставить("ИдентификаторКлючаДоступа", ДанныеАвторизации.ИдентификаторКлюча);
	ДанныеАутентификации.Вставить("СекретныйКлюч"            , ДанныеАвторизации.СекретныйКлюч);
	ДанныеАутентификации.Вставить("Сервис"                   , ДанныеАвторизации.Сервис);
	ДанныеАутентификации.Вставить("Регион"                   , ДанныеАвторизации.Регион);
	
	Возврат ДанныеАутентификации;
	
КонецФункции

Функция ДополнительныеПараметрыМетодов(ДанныеСервисаS3)
	
	Аутентификация = ДанныеАутентификации(ДанныеСервисаS3);
	
	ДополнительныеПараметры = КоннекторHTTP.НовыеПараметры();
	ДополнительныеПараметры.Аутентификация = Аутентификация;
	ДополнительныеПараметры.ПроверятьSSL   = Ложь;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьОписаниеМетаданныхНовогоФайла(ПараметрыЗагрузкиФайла)
	
	ОписаниеМетаданныхФайла = Новый Соответствие;
	
	Для Каждого Данные Из ПараметрыЗагрузкиФайла.МетаданныеФайла Цикл
		ОписаниеМетаданныхФайла.Вставить("X-Amz-Meta-" + Данные.Ключ, Данные.Значение);
	КонецЦикла;
	
	Возврат ОписаниеМетаданныхФайла;
	
КонецФункции

Функция СформироватьПараметрыЗапросаФайловБакета(ПараметрыПолученияФайловБакета)
	
	Параметры = Новый Соответствие;
	Параметры.Вставить("list-type", 2);
	
	Если ЗначениеЗаполнено(ПараметрыПолученияФайловБакета.КоличествоФайлов) Тогда
		Параметры.Вставить("max-keys", Формат(ПараметрыПолученияФайловБакета.КоличествоФайлов, "ЧДЦ=0; ЧРГ=' '; ЧГ=0"));
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция РазобратьОтветФайловБакета(ОтветКоннектора)
	
	Если ОтветСервисаXML(ОтветКоннектора.Заголовки) Тогда
		Возврат ПолучитьДанныеФайлаБакета(ОтветКоннектора);		
	Иначе
		ВызватьИсключение НСтр("ru = 'Формат ответа сервиса не соответствует ожидаемому (xml).'", "ru");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеФайлаБакета(ОтветКоннектора)
	
	РезультатЧтенияДанныхФайлов = Новый Структура;
	РезультатЧтенияДанныхФайлов.Вставить("ВсеФайлыПолучены", Истина);
	РезультатЧтенияДанныхФайлов.Вставить("КоличествоФайлов", 0);
	РезультатЧтенияДанныхФайлов.Вставить("Файлы", НовыйДанныеФайловБакета());
	РезультатЧтенияДанныхФайлов.Вставить("СледующийТокен");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ОтветКоннектора.Тело.ОткрытьПотокДляЧтения());
	
	ДанныеФайлов = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Свойства = ДанныеФайлов.Свойства();
	
	РезультатЧтенияДанныхФайлов.ВсеФайлыПолучены = Не Булево(ДанныеФайлов["IsTruncated"]);
	РезультатЧтенияДанныхФайлов.КоличествоФайлов = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ДанныеФайлов["KeyCount"]);
	
	СвойствоФайлов = "Contents";
	
	Если Свойства.Получить(СвойствоФайлов) <> Неопределено Тогда
		
		Если ТипЗнч(ДанныеФайлов[СвойствоФайлов]) = Тип("ОбъектXDTO") Тогда
			ФайлыБакета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеФайлов[СвойствоФайлов]);
		Иначе
			ФайлыБакета = ДанныеФайлов[СвойствоФайлов];
		КонецЕсли;
		
		Для Каждого Файл Из ФайлыБакета Цикл
			
			НовыйФайл = РезультатЧтенияДанныхФайлов.Файлы.Добавить();
			
			НовыйФайл.Ключ          = Файл["Key"];
			НовыйФайл.ДатаИзменения = XMLЗначение(Тип("Дата"), Файл["LastModified"]);
			НовыйФайл.Размер        = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Файл["Size"]);
			НовыйФайл.Расширение    = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(НовыйФайл.Ключ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не РезультатЧтенияДанныхФайлов.ВсеФайлыПолучены Тогда
		РезультатЧтенияДанныхФайлов.СледующийТокен = ДанныеФайлов["NextContinuationToken"];
	КонецЕсли;
		
	Возврат РезультатЧтенияДанныхФайлов;
	
КонецФункции

Функция НовыйДанныеФайловБакета()
	
	ДанныеФайлов = Новый ТаблицаЗначений;
	ДанныеФайлов.Колонки.Добавить("Ключ"         , ОбщегоНазначения.ОписаниеТипаСтрока(250));
	ДанныеФайлов.Колонки.Добавить("ДатаИзменения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДанныеФайлов.Колонки.Добавить("Размер"       , ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДанныеФайлов.Колонки.Добавить("Расширение"   , ОбщегоНазначения.ОписаниеТипаСтрока(10));
	
	Возврат ДанныеФайлов;
	
КонецФункции

Функция ОтветСервисаXML(ЗаголовкиОтвета)
	
	ТипСодержимого = ЗаголовкиОтвета.Получить("Content-Type");
	Возврат ТипСодержимого <> Неопределено И СтрНайти(ТипСодержимого, "xml");
	
КонецФункции

#Область ПодписаниеСсылки

Функция СформироватьПодписаниеЗаголовковСсылки(ДанныеСервисаS3, ДатаISO)
	
	ЗаголовкиПодписания = Новый Структура;
	ЗаголовкиПодписания.Вставить("КаноничныеЗаголовки");
	ЗаголовкиПодписания.Вставить("ПодписанныеЗаголовки");
	
	ЗаголовкиПоУмолчанию = ЗаголовкиПолученияСсылкиПоУмолчанию(ДанныеСервисаS3);
	НастройкиЗаголовковДляПодписи = НастройкиЗаголовковДляПодписи();
	
	ЗаголовкиСписком = Новый СписокЗначений;
	Для Каждого ЗаголовокЗапроса Из ЗаголовкиПоУмолчанию Цикл
		
		ИмяЗаголовка = НРег(ЗаголовокЗапроса.Ключ);
		
		Если НастройкиЗаголовковДляПодписи.Исключения.Найти(ИмяЗаголовка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеЗаголовка = СокрЛП(ЗаголовокЗапроса.Значение);
		
		Если НастройкиЗаголовковДляПодписи.Равно.Найти(ИмяЗаголовка) <> Неопределено Тогда
			ЗаголовкиСписком.Добавить(ИмяЗаголовка, ЗначениеЗаголовка);
		Иначе
			
			Для Каждого ЗаголовокНачинаетсяС Из НастройкиЗаголовковДляПодписи.НачинаетсяС Цикл
				Если СтрНачинаетсяС(ИмяЗаголовка, ЗаголовокНачинаетсяС) Тогда
					ЗаголовкиСписком.Добавить(ИмяЗаголовка, ЗначениеЗаголовка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	ЗаголовкиСписком.СортироватьПоЗначению();
	
	КаноничныеЗаголовки  = Новый Массив;
	Для Каждого Заголовок Из ЗаголовкиСписком Цикл
		КаноничныеЗаголовки.Добавить(Заголовок.Значение + ":" + Заголовок.Представление);
	КонецЦикла;
	
	ЗаголовкиПодписания.КаноничныеЗаголовки  = СтрСоединить(КаноничныеЗаголовки, Символы.ПС) + Символы.ПС;
	ЗаголовкиПодписания.ПодписанныеЗаголовки = СтрСоединить(ЗаголовкиСписком.ВыгрузитьЗначения(), ";");
	
	Возврат ЗаголовкиПодписания;
	
КонецФункции

Функция ЗаголовкиПолученияСсылкиПоУмолчанию(ДанныеСервисаS3)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("host", ДанныеСервисаS3.Сервер);
	
	Возврат Заголовки;
	
КонецФункции

Функция НастройкиЗаголовковДляПодписи()
	
	НастройкиЗаголовковДляПодписи = Новый Структура;
	НастройкиЗаголовковДляПодписи.Вставить("Равно"      , СтрРазделить("host", ","));
	НастройкиЗаголовковДляПодписи.Вставить("НачинаетсяС", СтрРазделить("x-amz-", ","));
	НастройкиЗаголовковДляПодписи.Вставить("Исключения" , СтрРазделить("x-amz-client-context", ","));
	
	Возврат НастройкиЗаголовковДляПодписи;
	
КонецФункции

Функция Удостоверение(ДанныеСервисаS3, ОбластьДействияДата)
	
	Удостоверение = Новый Массив;
	Удостоверение.Добавить(ОбластьДействияДата);
	Удостоверение.Добавить(ДанныеСервисаS3.Регион);
	Удостоверение.Добавить(ДанныеСервисаS3.Сервис);
	Удостоверение.Добавить("aws4_request");
	
	Возврат СтрСоединить(Удостоверение, "/");
	
КонецФункции

Функция СформироватьПараметрыЗапросаСсылки(ДанныеСервисаS3, ФормированиеПараметровЗапроса)
	
	ПодписанныеЗаголовки    = ФормированиеПараметровЗапроса.ПодписанныеЗаголовки.ПодписанныеЗаголовки;
	ВремяЖизниСсылки        = Формат(ФормированиеПараметровЗапроса.ВремяЖизниСсылки, "ЧДЦ=0; ЧРГ=' '; ЧГ=0");
	Удостоверение           = СтрШаблон("%1/%2", ДанныеСервисаS3.ИдентификаторКлюча, ФормированиеПараметровЗапроса.Удостоверение);
	МетодПодписания         = ФормированиеПараметровЗапроса.МетодПодписания;
	
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("X-Amz-Algorithm"    , МетодПодписания);
	ПараметрыЗапроса.Вставить("X-Amz-Date"         , ФормированиеПараметровЗапроса.ДатаISO);
	ПараметрыЗапроса.Вставить("X-Amz-SignedHeaders", ПодписанныеЗаголовки);
	ПараметрыЗапроса.Вставить("X-Amz-Expires"      , ВремяЖизниСсылки);
	ПараметрыЗапроса.Вставить("X-Amz-Credential"   , Удостоверение);
	
	ПараметрыСписком = Новый СписокЗначений;
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		ИмяПараметра      = КодироватьСтроку(ПараметрЗапроса.Ключ, СпособКодированияСтроки.КодировкаURL);
		ЗначениеПараметра = КодироватьСтроку(ПараметрЗапроса.Значение, СпособКодированияСтроки.КодировкаURL);
		
		ПараметрыСписком.Добавить(ИмяПараметра, ЗначениеПараметра);
	КонецЦикла;
	ПараметрыСписком.СортироватьПоЗначению();
	
	КаноничныеПараметры = Новый Массив;
	Для Каждого ПараметрЗапроса Из ПараметрыСписком Цикл
		КаноничныеПараметры.Добавить(ПараметрЗапроса.Значение + "=" + ПараметрЗапроса.Представление);
	КонецЦикла;
	
	Возврат СтрСоединить(КаноничныеПараметры, "&");
	
КонецФункции

Функция ХешированиеДанных(Знач Алгоритм, Знач Данные)

	Если ТипЗнч(Данные) = Тип("Строка") Тогда
		Данные = ПолучитьДвоичныеДанныеИзСтроки(Данные, КодировкаТекста.UTF8, Ложь);
	КонецЕсли;
	
	Хеширование = Новый ХешированиеДанных(Алгоритм);
	Хеширование.Добавить(Данные);
	
	Возврат НРег(ПолучитьHexСтрокуИзДвоичныхДанных(Хеширование.ХешСумма));

КонецФункции

Функция КлючПодписи(СекретныйКлюч, Дата, Регион, Сервис)
	
	КлючДата   = ПодписатьСообщениеHMAC("AWS4" + СекретныйКлюч, Дата);
	КлючРегион = ПодписатьСообщениеHMAC(КлючДата, Регион);
	КлючСервис = ПодписатьСообщениеHMAC(КлючРегион, Сервис);
	
	Возврат ПодписатьСообщениеHMAC(КлючСервис, "aws4_request");
	
КонецФункции

Функция ПодписатьСообщениеHMAC(Знач Ключ, Знач Сообщение, Знач Алгоритм = Неопределено)
	
	Если Алгоритм = Неопределено Тогда
		Алгоритм = ХешФункция.SHA256;
	КонецЕсли;
	
	Если ТипЗнч(Ключ) = Тип("Строка") Тогда
		Ключ = ПолучитьДвоичныеДанныеИзСтроки(Ключ, КодировкаТекста.UTF8, Ложь);
	КонецЕсли;
	
	Если ТипЗнч(Сообщение) = Тип("Строка") Тогда
		Сообщение = ПолучитьДвоичныеДанныеИзСтроки(Сообщение, КодировкаТекста.UTF8, Ложь);
	КонецЕсли;
	
	Возврат КоннекторHTTP.HMAC(Ключ, Сообщение, Алгоритм);
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

Функция НовыйОтвет()
	
	ОписаниеОтвета = Новый Структура;
	ОписаниеОтвета.Вставить("URL");
	ОписаниеОтвета.Вставить("Метод");
	ОписаниеОтвета.Вставить("КодСостояния");
	ОписаниеОтвета.Вставить("КлассификацияОшибки", "НеклассифицированнаяОшибка");
	ОписаниеОтвета.Вставить("Сообщение", Нстр("ru = 'Не удалось определить ошибку сервиса.'", "ru"));
	ОписаниеОтвета.Вставить("ИдентификаторЗапроса");
	
	Возврат ОписаниеОтвета; 
	
КонецФункции

Функция ОписаниеОтвета(ОтветКоннектора)
	
	ОписаниеОтвета = НовыйОтвет();
	ЗаполнитьЗначенияСвойств(ОписаниеОтвета, ОтветКоннектора); 
	
	Если ОтветСервисаXML(ОтветКоннектора.Заголовки) Тогда
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьПоток(ОтветКоннектора.Тело.ОткрытьПотокДляЧтения());
		
		Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		Если Результат["Code"] <> Неопределено Тогда
			ОписаниеОтвета.КлассификацияОшибки = Результат["Code"];
		КонецЕсли;
		
		Если Результат["Message"] <> Неопределено Тогда
			ОписаниеОтвета.Сообщение = Результат["Message"];
		КонецЕсли;
		
		Если Результат["RequestId"] <> Неопределено Тогда
			ОписаниеОтвета.ИдентификаторЗапроса = Результат["RequestId"];
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ОписаниеОтвета;
	
КонецФункции

Процедура ОбработатьОшибку(ОтветКоннектора, Сообщение, Событие)
	
	ОписаниеОтвета = ОписаниеОтвета(ОтветКоннектора); 
	
	СообщениеВЖурнал = СтрШаблон(
		Нстр("ru = '%1%2%3'", "ru"),
		Сообщение,
		Символы.ПС,
		S3_ОбщегоНазначения.СтруктураВСтроку(ОписаниеОтвета, ": ", Символы.ПС));
		
	ЗаписьЖурналаРегистрации(
		Событие,
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		СообщениеВЖурнал);
		
	ТекстИсключения = СтрШаблон(
		Нстр("ru = '%1, по причине:%2%3'", "ru"),
		Сообщение,
		Символы.ПС,
		ОписаниеОтвета.Сообщение);
		
	ВызватьИсключение(ТекстИсключения,, ОписаниеОтвета.КодСостояния, ОписаниеОтвета.КлассификацияОшибки);
	
КонецПроцедуры

Функция СобытиеСервиса()
	Возврат НСтр("ru = 'Объектное хранилище'", "ru")
КонецФункции

Функция СобытиеПолучениеФайла()
	Возврат СтрШаблон(НСтр("ru = '%1.Получение файла'", "ru"), СобытиеСервиса());
КонецФункции

Функция СобытиеЗагрузкиФайла()
	Возврат СтрШаблон(НСтр("ru = '%1.Загрузка файла'", "ru"), СобытиеСервиса());
КонецФункции

Функция СобытиеУдалениеФайла()
	Возврат СтрШаблон(НСтр("ru = '%1.Удаление файла'", "ru"), СобытиеСервиса());
КонецФункции

Функция СобытиеПолученияФайловБакета()
	Возврат СтрШаблон(НСтр("ru = '%1.Получение файлов бакета'", "ru"), СобытиеСервиса());
КонецФункции

Функция ЭтоКодОшибки(КодСостояния)
	Возврат СтрНачинаетсяС(Строка(КодСостояния), 3)
		Или СтрНачинаетсяС(Строка(КодСостояния), 4)
		Или СтрНачинаетсяС(Строка(КодСостояния), 5);
КонецФункции

#КонецОбласти

#Область URL

Функция URNБакета(ПараметрыОбработкиФайла)
	Возврат РазделительURI() + ПараметрыОбработкиФайла.Бакет;
КонецФункции

Функция URNОбъекта(ПараметрыОбработкиФайла)
	
	Возврат URNБакета(ПараметрыОбработкиФайла)
		+ РазделительURI()
		+ ЗакодироватьКлючОбъектаВURN(ПараметрыОбработкиФайла.КлючОбъекта);
	
КонецФункции

Функция URL(ДанныеАвторизации)
	
	Возврат СтрШаблон(
		"%1://%2%3",
		?(ДанныеАвторизации.ЗащищенноеСоединение, "https", "http"), 
		ДанныеАвторизации.Сервер);
	
КонецФункции

Функция URIБакета(ДанныеАвторизации, ПараметрыОбработкиФайла)
	Возврат URL(ДанныеАвторизации) + URNБакета(ПараметрыОбработкиФайла);
КонецФункции

Функция URIОбъекта(ДанныеАвторизации, ПараметрыОбработкиФайла)
	Возврат URL(ДанныеАвторизации) + URNОбъекта(ПараметрыОбработкиФайла);
КонецФункции

Функция ЗакодироватьКлючОбъектаВURN(КлючОбъекта)
	
	РазделительПути = ?(СтрНайти(КлючОбъекта, "\"), "\", "/");
	РазделительURI  = РазделительURI();
	
	ЕстьКорневойКаталог = Ложь;
	Если СтрНайти(КлючОбъекта, ":" + РазделительПути)
		Или СтрНачинаетсяС(КлючОбъекта, РазделительПути) Тогда
		ЕстьКорневойКаталог = Истина;
	КонецЕсли;
	
	ЧастиПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючОбъекта, РазделительПути, Истина);
	Если ЕстьКорневойКаталог Тогда
		ЧастиПути.Удалить(0);
	КонецЕсли;
	
	ЧастиКлючаURN = Новый Массив;
	Для Каждого ЧастьКлюча Из ЧастиПути Цикл
		ЧастиКлючаURN.Добавить(КодироватьСтроку(ЧастьКлюча, СпособКодированияСтроки.КодировкаURL));
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиКлючаURN, РазделительURI);
	
КонецФункции

Функция РазделительURI()
	Возврат "/";
КонецФункции

#КонецОбласти

#КонецОбласти